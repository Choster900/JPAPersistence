/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.view;

import com.controller.PersonJpaController;
import com.controller.exceptions.NonexistentEntityException;
import com.entities.Person;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 16ado
 */
public class JFrameperson extends javax.swing.JFrame {

    /**
     * Creates new form Form1
     */
    Person person = new Person();
    PersonJpaController ejc = new PersonJpaController();
    
    public JFrameperson() {
        initComponents();
        tablaPerson();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtNombre = new javax.swing.JTextField();
        txtApellidos = new javax.swing.JTextField();
        txtCodigo = new javax.swing.JTextField();
        txtSexo = new javax.swing.JTextField();
        txtCargo = new javax.swing.JTextField();
        txtFecha = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbPersona = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtFecha.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        tbPersona.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbPersona.setColumnSelectionAllowed(true);
        tbPersona.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPersonaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbPersona);
        tbPersona.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        btnAgregar.setText("ADD");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEditar.setText("EDIT");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setText("DELETE");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("CLEAR");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnEditar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtCodigo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(103, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAgregar))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(btnEditar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEliminar)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLimpiar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
         try {
            agregar();
            limpiar();
            tablaPerson();
        } catch (Exception e) {
            //Logger.getLogger(JFramepersona.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void tbPersonaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPersonaMouseClicked
        // TODO add your handling code here:
          int filaSeleccionada = tbPersona.getSelectedRow();
        llenarCampos(filaSeleccionada);
    // Llena los campos al hacer clic en una fila   
    }//GEN-LAST:event_tbPersonaMouseClicked

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        try {
            editar();
            tablaPerson();
        } catch (Exception e) {
            //Logger.getLogger(JFramepersona.class.getName()).log(System.Logger.Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
         try {
            eliminar();
            tablaPerson();
        } catch (NonexistentEntityException e) {
            //Logger.getLogger(JFramepersona.class.getName()).log(System.Logger.Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
                limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameperson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameperson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameperson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameperson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameperson().setVisible(true);
            }
        });
    }
    
    public void editar() throws Exception {
        String codigoText = this.txtCodigo.getText();
        if (codigoText.isEmpty() || !codigoText.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "El código de empleado no es un número válido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
            // Salir del método si el código no es válido         
        }
        try {
            int codigoPersona = Integer.parseInt(codigoText);
            person = ejc.findPerson(codigoPersona);
            if (person == null) {
                JOptionPane.showMessageDialog(null, "No se encontró un empleado con el código especificado", "Error", JOptionPane.ERROR_MESSAGE);
                return;
                // Salir del método si no se encuentra el empleado             
            }
            person.setNombre(this.txtNombre.getText());
            person.setApellidos(this.txtApellidos.getText());
            person.setSexo(this.txtSexo.getText());
            person.setFechaNacimiento(this.txtFecha.getText());
            person.setCargo(this.txtCargo.getText());

            int decision = JOptionPane.showConfirmDialog(this, "Desea modificar el empleado", "Modificar empleado", JOptionPane.YES_NO_OPTION);
            if (decision == 0) {
                ejc.edit(person);
                // Guardar los cambios en la base de datos                 
                JOptionPane.showMessageDialog(rootPane, "Modificado con éxito", "Confirmación", JOptionPane.INFORMATION_MESSAGE);
                limpiar();
                tablaPerson();
            } else {
                limpiar();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error al convertir el código de empleado a un número", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NonexistentEntityException e) {
            JOptionPane.showMessageDialog(null, "Error al editar empleado: el empleado no existe", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al editar empleado", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
     
    public void eliminar() throws NonexistentEntityException {
        String codigoText = this.txtCodigo.getText().trim();
        // Trimming para eliminar espacios en blanco         
        if (codigoText.isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo de código está vacío", "Error", JOptionPane.ERROR_MESSAGE);
            return;
            // Salir del método si el campo de código está vacío       
        }
        try {
            int codigoPersona = Integer.parseInt(codigoText);
            person.setCodigoPersona(codigoPersona);
            int decision = JOptionPane.showConfirmDialog(this, "Desea eliminar el empleado", "Eliminar empleado", JOptionPane.YES_NO_OPTION);
            if (decision == 0) {
                ejc.destroy(person.getCodigoPersona());
                JOptionPane.showMessageDialog(rootPane, "Eliminado con éxito", "Confirmación", JOptionPane.INFORMATION_MESSAGE);
                limpiar();
                tablaPerson();
            } else {
                limpiar();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El código de empleado no es un número válido", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NonexistentEntityException e) {
            JOptionPane.showMessageDialog(null, "No se encontró un empleado con el código especificado", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void llenarCampos(int filaSeleccionada) {
        if (filaSeleccionada != -1) {  // Seleccionó alguna fila             
            txtCodigo.setText(String.valueOf(this.tbPersona.getValueAt(filaSeleccionada, 0)));
            txtNombre.setText(String.valueOf(this.tbPersona.getValueAt(filaSeleccionada, 1)));
            txtApellidos.setText(String.valueOf(this.tbPersona.getValueAt(filaSeleccionada, 2)));
            txtSexo.setText(String.valueOf(this.tbPersona.getValueAt(filaSeleccionada, 3)));
            txtFecha.setText(String.valueOf(this.tbPersona.getValueAt(filaSeleccionada, 4)));
            txtCargo.setText(String.valueOf(this.tbPersona.getValueAt(filaSeleccionada, 5)));
        }
    }
    
    public void agregar() throws Exception {
        String codigoText = this.txtCodigo.getText();
        if (codigoText.isEmpty() || !codigoText.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "El código de empleado no es un número válido", "Error", JOptionPane.ERROR_MESSAGE);
            return;  // Salir del método si el código no es válido         
        }
        try {
            person.setCodigoPersona(Integer.parseInt(codigoText));
            person.setNombre(this.txtNombre.getText());
            person.setApellidos(this.txtApellidos.getText());
            person.setSexo(this.txtSexo.getText());
            person.setFechaNacimiento(this.txtFecha.getText());
            person.setCargo(this.txtCargo.getText());
            ejc.create(person);
            JOptionPane.showMessageDialog(null, "Datos insertados correctamente");
            limpiar();
            tablaPerson();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error al convertir el código de empleado a un número", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al agregar empleado", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    public void limpiar() {
        this.txtCodigo.setText("");
        this.txtNombre.setText("");
        this.txtApellidos.setText("");
        this.txtSexo.setText("");
        this.txtFecha.setText("");
        this.txtCargo.setText("");
    }
    public void tablaPerson() {
        String[] columnas = {"Código persona", "Nombre", "Apellidos", "Sexo", "Fecha nacimiento", "Cargo"};
        Object[] obj = new Object[6];
        DefaultTableModel tabla = new DefaultTableModel(null, columnas);
        List<Person> ls;
        try {
            ls = ejc.findPersonEntities();
            for (int i = 0; i < ls.size(); i++) {
                person = (Person) ls.get(i);
                obj[0] = person.getCodigoPersona();
                obj[1] = person.getNombre();
                obj[2] = person.getApellidos();
                obj[3] = person.getSexo();
                obj[4] = person.getFechaNacimiento();
                obj[5] = person.getCargo();
                tabla.addRow(obj);
            }
            ls = ejc.findPersonEntities();
            this.tbPersona.setModel(tabla);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al mostrar datos");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbPersona;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtCargo;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtSexo;
    // End of variables declaration//GEN-END:variables
}
